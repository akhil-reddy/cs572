Preprocessing Steps:

1. The chatbot is intended to process PDF documents for RAG. So, the first step is to load the PDF document(s), and create a sequence of pages. Once the (contiguous set of) pages are created, they are further broken down into chunks
2. Create a Facebook AI Similarity Search instance for storing and retrieving vector embeddings
3. Based on the model selected (I selected the Mistral 7B instruct), initialize the LLM model chain with (predefined or user-defined) LLM input parameters. Also initialize the memory object so that the chat history is stored and can be retrieved as text (instead of tokens). Next, convert the vector database (FAISS model) into a form that can retrieve based on similarity search. Finally, create the langchain object with the memory and vector db objects

Chatbot Events:

1. When a user query is submitted, the langchain object fetches the chat history and relevant vectors (from similarity search). It combines this context with the user query (because we're augmenting generation with retrieval i.e., RAG) and sends it to the LLM
2. The LLM responses and sources are returned to the chatbot
3. The interaction is stored in memory for further generation. In the end, the chatbot returns the LLM response to the UI

UI Elements:

1. This chatbot uses Gradio for rendering. gr.Blocks() initializes the main UI element. gr.State() initializes the state variables (the memory and langchain objects) for dynamic rendering
2. gr.HTML(), gr.Markdown(), gr.Row() and gr.Column() are equivalent to header div elements in HTML, i.e., they are used to organize the page layout
3. gr.Files() is the UI element that processes the PDF file uploaded on the UI. gr.Button(), gr.Radio(), gr.Slider() and gr.Textbox() are similar to their HTML counterparts, which are used to create buttons, sliders and text boxes
4. gr.Chatbot() initializes the UI element that can render the responses and history from the langchain object / LLM
5. In addition, a few javascript-like events such as db_btn.click(), msg.submit(), clear_btn.click() are used to trigger the appropriate python methods / chatbot objects for dynamic state changes